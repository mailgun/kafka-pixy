# Workflow for building golang mailgun projects
# See https://mailgun.atlassian.net/wiki/spaces/ENG/pages/4034428968/GitHub+Actions+for+Mailgun

name: On Pull Request

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      # SSH key is used in buildx via --ssh mount feature, buildx will use
      # the agent we setup here and expose the agent inside the build
      # container such that no ssh keys are included in any of the
      # layers of the final image
      - name: Setup SSH Key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.CI_SSH_KEY }}"
      # Create a build container which buildx will use as a driver when building the container.
      # See https://github.com/docker/buildx/blob/master/docs/reference/buildx_create.md#driver
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          # Enables host networking which allows tests run by buildx to access
          # the containers started by docker compose on localhost
          driver-opts: network=host
      # Login to the registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CI_PAT }}
      # This creates a cache for the current PR, if none exists then
      # the cache from the most recent PR will be used.
      - name: Setup Docker layer Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.event.number }}
          restore-keys: ${{ runner.os }}-docker-
      # Use curl to fetch a golang or python `Dockerfile` from `mailgun/workflows`
      # as the github action yaml you are now reading should be exactly the same for
      # both golang and python builds, only the `Dockerfile` is different.
      - name: Download the latest buildx Docker file
        run: |
          curl -L https://api.github.com/repos/mailgun/workflows/contents/go/Dockerfile \
          -H "Authorization: token ${{ secrets.CI_PAT }}" \
          -H "Accept: application/vnd.github.v3.raw" \
          -o .github/Dockerfile
      # Automagically extract useful information from the current github context and creates
      # a set of labels for use by build-push-action to be attached to the final image.
      - name: Extract Metadata for Docker
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
        id: meta
      # This action runs Buildx, which allows for a more complex Dockerfile.
      # We use a buildx Dockerfile to run tests as well as build the final image.
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          # We change the path context here since the github context does not include
          # changes to local files, like when we download `Dockerfile`.
          # See https://github.com/docker/build-push-action#git-context
          context: .
          file: .github/Dockerfile
          tags: ghcr.io/${{ github.repository }}:PR${{ github.event.number }}
          # We use local cache type, so we can clean up the cache
          # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#local-cache
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          ssh: default=/tmp/ssh_agent.sock
          labels: ${{ steps.meta.outputs.labels }}
          push: true
      # This is to avoid the cache sizes from continually growing as new image layers
      # are created. See the following issues:
      #   https://github.com/docker/build-push-action/issues/252
      #   https://github.com/moby/buildkit/issues/1896
      - name: Retire old cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
